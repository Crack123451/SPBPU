clc, clear, echo off
% Заданные условия


% Параметры возмущаюших воздействий
mux = 0; % МО шума возмущения
muy = 0; % MO шума измерения
sigmx = 1; % Дисперсия шума возмущения
sigmy = 4; % Дисперсия шума измерения
 
% Процесс авторегресии первого порядка x(n) = a1*x(n-1)+g
% Процесс авторегресии второго порядка x(n) = a1*x(n-1)+a2*x(n-2)+g
a1=0.25;  % Коэффициент авторегресси a1
a2=0.5;  % Коэффициент авторегресси a2
A = [a1 a2; 1 0]; % Матрица состояния 
 
 
%mu1 = 0; % МО шума возмущения
%Msm = 3; % Постоянное смещение уровня шумов в канале измерения
%Msv = 3; % постоянное смещение уровня шумов в канале возмущения
F = [1;0]; % Вектор входа по возмущению
    
% Параметры наблюдателя
C = [1 0]; % Вектор измерения по состоянию       
%Начальные условия
X1 = [0;0]; % Начальное наблюдение
P = sigmy*[1 0; 0 1]; % Корреляционная матрица ошибок фильтрации
X1_=[0;0]; % Начальная оценка наблюдения
 
%Счетчик цикла реализаций (дискретное время)
n = 5000;
time = 1:n;
n1 = 2500;  % при дефекте            
Znorm = zeros(1,n); % размер матрицы                       
%Цикл реализации работы фильтра
for i=1:n
    %Моделирование наблюдений
    X1 = A*X1 + normrnd(mux,sigmx);
    % Моделирование измерений
    Y = C*X1 + normrnd(muy,sigmy);
  
    Xm(1,i) = X1(1,1);
    %Вычисление матричного коэффициента усиления
    %и корреляционной матрицы ошибок экстраполяции
    Q = A*P*A' + F*sigmx*F';
    K = Q*(C')*((C*Q*(C') + sigmy)^-1);
    P = Q - K*C*Q;
    %Оценка вектора состояния и вычисление обновляющей
    %последовательности
    X1_ = A*X1_ + F*mux + K*(Y - C*(A*X1_ + F*mux));
    Z1 = Y - C*(A*X1_ + F*mux);
    Zi(i)=Z1;
    %нормировочный коэффициент
    S = sigmy + C*P*(C') - sigmy*(K')*(C') - C*K*sigmy;
    %нормируем обновляющую последовательность
    Z = (Z1)*(S^-0.5);
    Znorm(1,i)=Z;
end

M = 50;       %глубина памяти алгоритма
R = 50;       %глубина памяти обновляющей матрицы
summl=zeros(1,M);
An = zeros(1,R);
for i=1:n
    % метод АНОМ
    h=sqrt(max(R,1));
    % сдвиг
    An=[An Znorm(1,i)];
    An=An(1, 2:R+1);
    lambda = eig (An'*An);
    % сдвиг
    summl=[summl sqrt(max(lambda))];
    summl=summl(1,2:M+1);
    if i >= M+R
        G(1,i)=(1/M)*sum(summl);
        if (G(1,i)>=2*h)||(G(1,i)<=h)
            err(i)=1;
        else
            err(i)=0;
        end
    end
end

Plo=mean(err)
hFigure1 = figure('Color',[1 1 1]);
hAxes1 = axes('Visible','on','Parent',hFigure1);
box('on');
hold('all');
grid on; 
xlabel( hAxes1, 'Time','FontSize',10); ylabel(hAxes1, 'Znorm','FontSize',10);   


plot(time, Znorm);

grid on;

